---
title: 'Tutorial 2: MLE in the Weibull model'
output:
html_notebook: default
html_document: default
---
```{r}
rm(list=ls()) # Execute to clear all variables
```
---
title: 'Tutorial 2: MLE in the Weibull model'
output:
html_notebook: default
html_document: default
---
rm(list=ls()) # Execute to clear all variables
rm(list=ls()) # Execute to clear all variables
rm(list=ls()) # Execute to clear all variables
MySample = rweibull(n_sample,true_m)
```{r}
# Parameters
true_m = 3 # Do not hesitate to modifiy this value!
n_sample = 10^3 # Size of the sample
MySample = rweibull(n_sample,true_m)
MySample = rweibull(n_sample,true_m)
Visualisation: plot a histogram of the sample and add the graph of the true density.
---
title: 'Tutorial 2: MLE in the Weibull model'
output:
html_notebook: default
html_document: default
---
```{r}
rm(list=ls()) # Execute to clear all variables
rm(list=ls()) # Execute to clear all variables
Our purpose is to construct a confidence interval for the parameter $m$ in the Weibull model, using the technique of bootstrapping.
We first generate our data set.
```{r}
# Parameters
true_m = 3 # Do not hesitate to modifiy this value!
n_sample = 10^3 # Size of the sample
MySample = rweibull(n_sample,true_m)
MySample = rweibull(n_sample,true_m)
Visualisation: plot a histogram of the sample and add the graph of the true density.
```{r}
# Write your code here
hist(MySample)
Density(MySample)
dweibull(MySample)
dweibull(MySample, n_sample)
hist(dweibull(MySample, n_sample))
hist(MySample)
hist(MySample)
X = seq(0,2,by=0.01)
Y = dweibull(MySample, true_m)
plot(X,Y)
X = seq(0,2,by=2/n_sample)
Y = dweibull(MySample, true_m)
plot(X,Y)
X = seq(0,2,by=2/n_sample)
Y = dweibull(X, true_m)
plot(X,Y)
X = seq(0,2,by=1/n_sample)
Y = dweibull(X, true_m)
plot(X,Y)
```{r}
phi = function(m,Sample) {
return(1/m+mean(log(Sample)*(1-Sample^m)))
}
mm = seq(from=1,to=10,length=10^2)
vp = c()
for (i in 1:10^2) {
vp[i] = phi(mm[i],MySample)
}
plot(mm,vp,type="l")
abline(h=0,col="red")
phi_deriv = function(m,Sample) {
return(-1/m^2-mean(log(Sample)^2*Sample^m))
}
phi_deriv = function(m,Sample) {
return(-1/m^2-mean(log(Sample)^2*Sample^m))
}
plot(mm,vp,type="l")
abline(h=0,col="red")
```{r}
phi = function(m,Sample) {
return(1/m+mean(log(Sample)*(1-Sample^m)))
}
mm = seq(from=1,to=10,length=10^2)
vp = c()
for (i in 1:10^2) {
vp[i] = phi(mm[i],MySample)
}
plot(mm,vp,type="l")
```{r}
hist(MySample, freq=FALSE)
X = seq(0,2,by=1/n_sample)
Y = dweibull(X, true_m)
lines(X,Y)
lines(X,Y)
```{r}
hist(MySample, freq=FALSE)
X = seq(0,2,by=1/n_sample)
Y = dweibull(X, true_m)
lines(X,Y)
hist(MySample, freq=FALSE)
X = seq(0,2,by=1/n_sample)
Y = dweibull(X, true_m)
lines(X,Y)
---
title: 'Tutorial 2: MLE in the Weibull model'
output:
html_notebook: default
html_document: default
---
```{r}
rm(list=ls()) # Execute to clear all variables
rm(list=ls()) # Execute to clear all variables
Our purpose is to construct a confidence interval for the parameter $m$ in the Weibull model, using the technique of bootstrapping.
We first generate our data set.
```{r}
# Parameters
true_m = 3 # Do not hesitate to modifiy this value!
n_sample = 10^3 # Size of the sample
MySample = rweibull(n_sample,true_m)
MySample = rweibull(n_sample,true_m)
Visualisation: plot a histogram of the sample and add the graph of the true density.
```{r}
hist(MySample, freq=FALSE)
X = seq(0,2,by=1/n_sample)
Y = dweibull(X, true_m)
lines(X,Y)
plot(X,Y)
lines(X,Y)
X = seq(0,2,by=1/n_sample)
lines(X,dweibull(X, true_m))
